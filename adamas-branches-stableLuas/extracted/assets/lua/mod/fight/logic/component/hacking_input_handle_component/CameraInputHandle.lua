---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2023/6/21 10:02
---

CameraInputHandle = BaseClass("CameraInputHandle", BaseInputHandle)

function CameraInputHandle:Init(fight, entity, config)
    self.fight = fight
    self.entity = entity
    self.config = config

    local ecoId = entity.sInstanceId
    self.cameraCfg = Config.DataMonitor.Find[ecoId]
end

function CameraInputHandle:SwitchToCameraViewport()
	EventMgr.Instance:Fire(EventName.HackStateChange, self.entity.instanceId, self.config.HackingType)

    local pos = self.entity.transformComponent:GetPosition()
    local rot = self.entity.transformComponent:GetRotation():ToEulerAngles()
    local player = self.fight.playerManager:GetPlayer()
    player:SetLodCenterPoint(pos)

    local ctrlEntity = player:GetCtrlEntityObject()
    if not ctrlEntity.stateComponent:IsHacking() then
        player:SetPosNRotRecord()
        ctrlEntity.values["HackingCamera"] = true
        ctrlEntity.stateComponent:SetHackState(FightEnum.HackState.Hacking)
    end

    local camera = CameraManager.Instance.states[FightEnum.CameraState.Monitor]
    local target = self.entity.clientTransformComponent:GetTransform("CameraTarget")
    camera.mainTarget = target
	camera.cinemachineCamera.m_Follow = target
    camera.target = target
	camera.cinemachineCamera.m_LookAt = target

    ctrlEntity.stateComponent:SetHackingType(FightEnum.HackingType.Camera)
    ctrlEntity.stateComponent:SetHackingMoveState(false)
    BehaviorFunctions.SetCameraState(FightEnum.CameraState.Monitor)

    UnityUtils.SetLocalEulerAngles(camera.cameraParent, rot.x, rot.y, rot.z)
    -- CameraManager.Instance:SetCameraPosition(pos.x, pos.y, pos.z)

    local yMaxAngle = 90
    local yMinAngle = -90
    local xMaxAngle = 90
    local xMinAngle = -90
    if self.cameraCfg then
        yMaxAngle = self.cameraCfg.vertical_limit[2]
        yMinAngle = self.cameraCfg.vertical_limit[1]
        xMaxAngle = self.cameraCfg.horizontal_limit[2]
        xMinAngle = self.cameraCfg.horizontal_limit[1]

        --UnityUtils.SetLocalEulerAngles(camera.cameraParent, self.cameraCfg.rotX, self.cameraCfg.rotY, self.cameraCfg.rotZ)
    end

    CinemachineInterface.ChangePovParam(camera.camera, xMinAngle, xMaxAngle, yMinAngle, yMaxAngle)

    self.fight.entityManager:CallBehaviorFun("CameraHack", self.entity.instanceId, true)
end

function CameraInputHandle:StopHacking(nextHackId)
    local player = Fight.Instance.playerManager:GetPlayer()
	local ctrlEntity = player:GetCtrlEntityObject()

	local id = self.fight.hackManager:GetHackingId()
	if id ~= self.entity.instanceId then
		return
	end

    local recordPos = player:GetRecordPosition()
    player:SetLodCenterPoint()

    ctrlEntity.stateComponent:SetHackingType()
    ctrlEntity.stateComponent:SetHackingMoveState(true)
    BehaviorFunctions.SetCameraState(FightEnum.CameraState.Hacking)
	
	local callBack = function()
        ctrlEntity.values["HackingCamera"] = true
        --ctrlEntity.stateComponent:SetHackState(FightEnum.HackState.Waiting)
        if not nextHackId then
            EventMgr.Instance:Fire(EventName.ExitHackingMode)
        end
		BehaviorFunctions.Resume()
	end

    local nextPos
    if nextHackId then
        local entity = BehaviorFunctions.GetEntity(nextHackId)
        nextPos = entity.transformComponent:GetPosition()
    else
        nextPos = ctrlEntity.transformComponent:GetPosition()
    end

    if Vec3.SquareDistance(recordPos, nextPos) > 2500 then
        BehaviorFunctions.Pause()
        local resLoad = MapResourcesPreload.New(recordPos.x, recordPos.y, recordPos.z, callBack)
        resLoad:DoPreload(true)
    else
        callBack()
    end

    self.fight.entityManager:CallBehaviorFun("CameraHack", self.entity.instanceId, false)
end

function CameraInputHandle:ClickUp(down)
    if down then
        self:SwitchToCameraViewport()
        self.entity.hackingInputHandleComponent:Hacking()
    end
end

function CameraInputHandle:OnCache()
    self.fight.objectPool:Cache(CameraInputHandle, self)
end