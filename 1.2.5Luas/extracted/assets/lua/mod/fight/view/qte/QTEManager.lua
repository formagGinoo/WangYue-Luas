---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2023/2/13 11:55
---
QTEManager = BaseClass("QTEManager")


function QTEManager:__init(fight)
    self.fight = fight
    self.qteId = 0
    self.QTETypeView = {
        ClickQTE,
        ResistQTE,
        SectionQTE,
        HoldQTE,
        ScratchQTE,
        SwitchQTE,
        DebuffQTE,
        AssassinQTE,
    }

    self.activeQTEList = {}
    self.cacheQTEList = {
        [FightEnum.NewQTEType.Click] = {},
        [FightEnum.NewQTEType.Resist] = {},
        [FightEnum.NewQTEType.Section] = {},
        [FightEnum.NewQTEType.Hold] = {},
        [FightEnum.NewQTEType.Scratch] = {},
        [FightEnum.NewQTEType.Switch] = {},
        [FightEnum.NewQTEType.Debuff] = {},
        [FightEnum.NewQTEType.Assassin] = {},
    }
end

function QTEManager:ShowNewQTE(type, setting)
    if self.QTETypeView[type] then
        UnityUtils.BeginSample("QTEManager:ShowNewQTE")
        self.qteId = self.qteId + 1
        local QTEPanel = self:GetQTEPanel(type)
        QTEPanel:Reset(self.qteId, setting)
        QTEPanel:Show()
        
        self.activeQTEList[self.qteId] = QTEPanel
        UnityUtils.EndSample()
        return self.qteId
    else
        LogError("未传入正确的QTE类型")
    end
end

function QTEManager:GetQTEPanel(type)
    local QTEPanel =  self.cacheQTEList[type]
    if self.cacheQTEList[type] and next(self.cacheQTEList[type]) then
        local length = #self.cacheQTEList[type]
        QTEPanel = self.cacheQTEList[type][length]
        self.cacheQTEList[type][length] = nil
    else
        QTEPanel = self.QTETypeView[type].New()
    end
    return QTEPanel
end

function QTEManager:StopQTE(qteId)
    if self.activeQTEList[qteId] then
        self.activeQTEList[qteId]:onCache()
        table.insert(self.cacheQTEList[self.activeQTEList[qteId].type], self.activeQTEList[qteId])
        self.activeQTEList[qteId] = nil
    end
end

function QTEManager:PauseQTE(isPause)
    for _, v in pairs(self.activeQTEList) do
        v.isPause = isPause
    end
end

function QTEManager:ChangeQTETime(instanceId, qteId, deltaTime)
    if self.activeQTEList[qteId] then
        if self.activeQTEList[qteId].ChangeQTETime then
            self.activeQTEList[qteId]:ChangeQTETime(deltaTime)
        end
    end
end

function QTEManager:PlayQTEUIEffect(qteId, effectName, parentName, position)
    if self.activeQTEList[qteId] then
        if self.activeQTEList[qteId].PlayEffect then
            self.activeQTEList[qteId]:PlayEffect(effectName, parentName, position)
        end
    end
end

function QTEManager:StopQTEUIEffect(qteId, effectName, parentName)
    if self.activeQTEList[qteId] then
        if self.activeQTEList[qteId].StopEffect then
            self.activeQTEList[qteId]:StopEffect(effectName, parentName)
        end
    end
end

function QTEManager:Update(lerpTime)
    for _, v in pairs(self.activeQTEList) do
        if v.Update then
            v:Update(lerpTime)
        end
    end
end

function QTEManager:BeforeUpdate()
    for _, v in pairs(self.activeQTEList or {}) do
        if v.BeforeUpdate then
            v:BeforeUpdate(Global.deltaTime)
        end
    end
end

function QTEManager:__delete()
    for _, qte in pairs(self.activeQTEList) do
        qte:Destroy()
    end

    for _, types in pairs(self.cacheQTEList) do
        for _, qte in pairs(types) do
            qte:Destroy()
        end
    end

    self.cacheQTEList = nil
    self.activeQTEList = nil
end